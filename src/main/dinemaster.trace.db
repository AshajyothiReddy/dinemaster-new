2023-11-14 03:33:16 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table if not exists chef( id INT primary key AUTO_INCREMENT, firstName varchar(255), lastName varchar(255), expertise varchar(255), experienceYears INT, restaurantId INT, FOREIGN KEY [*]restaurantId references restaurant(id) )"; expected "("; SQL statement:
create table if not exists chef( id INT primary key AUTO_INCREMENT, firstName varchar(255), lastName varchar(255), expertise varchar(255), experienceYears INT, restaurantId INT, FOREIGN KEY restaurantId references restaurant(id) ) [42001-214]
2023-11-14 03:46:55 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table if not exists chef( id INT primary key AUTO_INCREMENT, firstName varchar(255), lastName varchar(255), expertise varchar(255), experienceYears INT, restaurantId INT, FOREIGN KEY [*]restaurantId references restaurant(id) )"; expected "("; SQL statement:
create table if not exists chef( id INT primary key AUTO_INCREMENT, firstName varchar(255), lastName varchar(255), expertise varchar(255), experienceYears INT, restaurantId INT, FOREIGN KEY restaurantId references restaurant(id) ) [42001-214]
2023-11-14 04:10:26 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table if not exists chef( id INT primary key AUTO_INCREMENT, firstName varchar(255), lastName varchar(255), expertise varchar(255), experienceYears INT, restaurantId INT, FOREIGN KEY [*]restaurantId references restaurant(id) )"; expected "("; SQL statement:
create table if not exists chef( id INT primary key AUTO_INCREMENT, firstName varchar(255), lastName varchar(255), expertise varchar(255), experienceYears INT, restaurantId INT, FOREIGN KEY restaurantId references restaurant(id) ) [42001-214]
2023-11-14 05:06:15 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table if not exists chef( id INT primary key AUTO_INCREMENT, firstName varchar(255), lastName varchar(255), expertise varchar(255), experienceYears INT, restaurantId INT, FOREIGN KEY [*]restaurantId references restaurant(id) )"; expected "("; SQL statement:
create table if not exists chef( id INT primary key AUTO_INCREMENT, firstName varchar(255), lastName varchar(255), expertise varchar(255), experienceYears INT, restaurantId INT, FOREIGN KEY restaurantId references restaurant(id) ) [42001-214]
2023-11-14 05:42:06 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table if not exists chef( id INT primary key AUTO_INCREMENT, firstName varchar(255), lastName varchar(255), expertise varchar(255), experienceYears INT, restaurantId INT, FOREIGN KEY [*]restaurantId references restaurant(id) )"; expected "("; SQL statement:
create table if not exists chef( id INT primary key AUTO_INCREMENT, firstName varchar(255), lastName varchar(255), expertise varchar(255), experienceYears INT, restaurantId INT, FOREIGN KEY restaurantId references restaurant(id) ) [42001-214]
2023-11-14 05:44:03 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table if not exists chef( id INT primary key AUTO_INCREMENT, firstName varchar(255), lastName varchar(255), expertise varchar(255), experienceYears INT, restaurantId INT, FOREIGN KEY [*]restaurantId references restaurant(id) )"; expected "("; SQL statement:
create table if not exists chef( id INT primary key AUTO_INCREMENT, firstName varchar(255), lastName varchar(255), expertise varchar(255), experienceYears INT, restaurantId INT, FOREIGN KEY restaurantId references restaurant(id) ) [42001-214]
2023-11-14 06:38:24 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table if not exists chef( id INT primary key AUTO_INCREMENT, firstName varchar(255), lastName varchar(255), expertise varchar(255), experienceYears INT, restaurantId INT, FOREIGN KEY [*]restaurantId references restaurant(id) )"; expected "("; SQL statement:
create table if not exists chef( id INT primary key AUTO_INCREMENT, firstName varchar(255), lastName varchar(255), expertise varchar(255), experienceYears INT, restaurantId INT, FOREIGN KEY restaurantId references restaurant(id) ) [42001-214]
2023-11-14 06:41:47 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "create table if not exists chef( id INT primary key AUTO_INCREMENT, firstName varchar(255), lastName varchar(255), expertise varchar(255), experienceYears INT, restaurantId INT, FOREIGN KEY [*]restaurantId references restaurant(id) )"; expected "("; SQL statement:
create table if not exists chef( id INT primary key AUTO_INCREMENT, firstName varchar(255), lastName varchar(255), expertise varchar(255), experienceYears INT, restaurantId INT, FOREIGN KEY restaurantId references restaurant(id) ) [42001-214]
2023-11-14 06:46:17 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column "RESTAURANTID" not found; SQL statement:
insert into chef(firstName, lastName, expertise, experienceYears, restaurantId) values('John', 'Doe', 'Sous Chef', 5, 1) [42122-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:502)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.table.Table.getColumn(Table.java:749)
	at org.h2.command.Parser.parseColumn(Parser.java:1256)
	at org.h2.command.Parser.parseColumnList(Parser.java:1241)
	at org.h2.command.Parser.parseInsert(Parser.java:1641)
	at org.h2.command.Parser.parsePrepared(Parser.java:814)
	at org.h2.command.Parser.parse(Parser.java:689)
	at org.h2.command.Parser.parse(Parser.java:661)
	at org.h2.command.Parser.prepareCommand(Parser.java:569)
	at org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:631)
	at org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:554)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1116)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:237)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:223)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:147)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:731)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:307)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1303)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1292)
	at com.example.dinemaster.DineMasterApplication.main(DineMasterApplication.java:12)
